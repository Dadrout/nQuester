import pygame
import random
import json
import os
from settings import *
from sound_manager import get_sound_manager

class Item:
    """–ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –±–æ–Ω—É—Å—ã –∏–≥—Ä–æ–∫—É"""
    def __init__(self, name, description, icon, effect_type, effect_value, duration=0):
        self.name = name
        self.description = description
        self.icon = icon
        self.effect_type = effect_type  # "users", "speed", "luck", "energy"
        self.effect_value = effect_value
        self.duration = duration  # 0 = permanent, >0 = temporary
        self.obtained_time = 0

class ProgressTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–≤–µ—Å—Ç–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
    def __init__(self):
        self.quest_progress = {}
        self.student_progress = {}
        self.mentor_progress = {}
        self.total_quests = 0
        self.completed_quests = 0
        
    def update_quest_progress(self, quest_id, completed=False):
        if quest_id not in self.quest_progress:
            self.quest_progress[quest_id] = {"completed": False, "attempts": 0}
        
        if completed:
            self.quest_progress[quest_id]["completed"] = True
            self.completed_quests += 1
        else:
            self.quest_progress[quest_id]["attempts"] += 1
    
    def get_quest_progress_percentage(self):
        if self.total_quests == 0:
            return 0
        return (self.completed_quests / self.total_quests) * 100
    
    def update_student_progress(self, student_id, quest_completed=False):
        if student_id not in self.student_progress:
            self.student_progress[student_id] = {"quests_completed": 0, "total_quests": 0}
        
        if quest_completed:
            self.student_progress[student_id]["quests_completed"] += 1
    
    def get_student_progress_percentage(self, student_id):
        if student_id not in self.student_progress:
            return 0
        student = self.student_progress[student_id]
        if student["total_quests"] == 0:
            return 0
        return (student["quests_completed"] / student["total_quests"]) * 100

class RewardSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥"""
    def __init__(self):
        self.items = []
        self.achievements = []
        self.user_bonuses = 0
        self.load_items()
    
    def load_items(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.items_data = {
            "coffee": {
                "name": "–ö–æ—Ñ–µ",
                "description": "–î–∞–µ—Ç +50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤",
                "icon": "‚òï",
                "effect_type": "users",
                "effect_value": 50,
                "duration": 0
            },
            "energy_drink": {
                "name": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫",
                "description": "–í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 50%",
                "icon": "‚ö°",
                "effect_type": "speed",
                "effect_value": 1.5,
                "duration": 30000  # 30 —Å–µ–∫—É–Ω–¥
            },
            "presentation": {
                "name": "–î–æ–∫–ª–∞–¥",
                "description": "–ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç +200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "icon": "üìä",
                "effect_type": "users",
                "effect_value": 200,
                "duration": 0
            },
            "certificate": {
                "name": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
                "description": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "icon": "üèÜ",
                "effect_type": "users",
                "effect_value": 100,
                "duration": 0
            },
            "debug_tool": {
                "name": "–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –±–∞–≥–∏",
                "icon": "üîß",
                "effect_type": "luck",
                "effect_value": 1.3,
                "duration": 0
            }
        }
    
    def give_reward(self, quest_id, difficulty="normal"):
        """–í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–≤–µ—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        base_users = 100
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_multipliers = {
            "easy": 0.7,
            "normal": 1.0,
            "hard": 1.5,
            "boss": 3.0
        }
        
        multiplier = difficulty_multipliers.get(difficulty, 1.0)
        users_reward = int(base_users * multiplier)
        
        # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        item_chance = 0.3 if difficulty == "normal" else 0.5 if difficulty == "hard" else 0.8
        item = None
        
        if random.random() < item_chance:
            item_name = random.choice(list(self.items_data.keys()))
            item_data = self.items_data[item_name]
            item = Item(
                item_data["name"],
                item_data["description"],
                item_data["icon"],
                item_data["effect_type"],
                item_data["effect_value"],
                item_data["duration"]
            )
        
        return {
            "users": users_reward,
            "item": item,
            "experience": int(50 * multiplier)
        }

class RandomEvent:
    """–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ"""
    def __init__(self, name, description, effect_type, effect_value, duration=0):
        self.name = name
        self.description = description
        self.effect_type = effect_type
        self.effect_value = effect_value
        self.duration = duration
        self.active = False
        self.start_time = 0

class EventManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    def __init__(self):
        self.events = []
        self.active_events = []
        self.event_timer = 0
        self.event_interval = 60000  # 1 –º–∏–Ω—É—Ç–∞
        self.setup_events()
    
    def setup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        self.events = [
            RandomEvent(
                "–ò–Ω–≤–µ—Å—Ç–æ—Ä –ø—Ä–∏—à–µ–ª!",
                "–ò–Ω–≤–µ—Å—Ç–æ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ! +300 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "users",
                300,
                30000  # 30 —Å–µ–∫—É–Ω–¥
            ),
            RandomEvent(
                "–°–µ—Ä–≤–µ—Ä —É–ø–∞–ª!",
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! -100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "users",
                -100,
                15000  # 15 —Å–µ–∫—É–Ω–¥
            ),
            RandomEvent(
                "–í–∏—Ä—É—Å–Ω—ã–π —Ç—Ä–µ–Ω–¥!",
                "–í–∞—à –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–ª –≤–∏—Ä—É—Å–Ω—ã–º! +500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "users",
                500,
                45000  # 45 —Å–µ–∫—É–Ω–¥
            ),
            RandomEvent(
                "–•–∞–∫–µ—Ä—Å–∫–∞—è –∞—Ç–∞–∫–∞!",
                "–ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞! –ù—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥–∏",
                "bug_hunt",
                0,
                20000  # 20 —Å–µ–∫—É–Ω–¥
            ),
            RandomEvent(
                "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏! +400 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "users",
                400,
                60000  # 1 –º–∏–Ω—É—Ç–∞
            )
        ]
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        self.event_timer += dt
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if self.event_timer >= self.event_interval:
            self.trigger_random_event()
            self.event_timer = 0
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        current_time = pygame.time.get_ticks()
        self.active_events = [
            event for event in self.active_events
            if current_time - event.start_time < event.duration
        ]
    
    def trigger_random_event(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        if not self.events:
            return
        
        event = random.choice(self.events)
        event.active = True
        event.start_time = pygame.time.get_ticks()
        self.active_events.append(event)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å–æ–±—ã—Ç–∏—è
        sound_manager = get_sound_manager()
        if sound_manager:
            sound_manager.play_sound("event")
        
        print(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.name}")

class NPCInteraction:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å NPC"""
    def __init__(self):
        self.dialogue_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NPC
        self.quest_completion_dialogues = {}
        self.setup_completion_dialogues()
    
    def setup_completion_dialogues(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤"""
        self.quest_completion_dialogues = {
            "Alikhan": [
                "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π Swift –º–∞—Å—Ç–µ—Ä! üçé",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å iOS! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!",
                "–¢—ã —Å–ø–∞—Å –Ω–∞—à –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç! –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!"
            ],
            "Alibeck": [
                "–ò–º–ø—Ä–µ—Å—Å–∏–≤–Ω–æ! AI —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã! ü§ñ",
                "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Å—Ç–∞–ª–∞ –Ω–∞–º–Ω–æ–≥–æ —É–º–Ω–µ–µ! –°–ø–∞—Å–∏–±–æ!",
                "–¢—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –Ω–∞—à AI –≤ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≥–µ–Ω–∏—è!"
            ],
            "Bahredin": [
                "–ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ —Ç–µ–ø–µ—Ä—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üîí",
                "TypeScript —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!",
                "–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö any! –¢—ã —Å–ø–∞—Å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!"
            ],
            "Bahaudin": [
                "–°–µ—Ä–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –ø–∞–¥–∞–µ—Ç! üíæ",
                "–ü–∞–º—è—Ç—å —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π backend —ç–∫—Å–ø–µ—Ä—Ç!"
            ],
            "Gaziz": [
                "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ! ‚öõÔ∏è",
                "Frontend —Å–ø–∞—Å–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∞–¥–∫—É!",
                "–¢—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –Ω–∞—à UI –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞!"
            ],
            "Shoqan": [
                "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ! üì±",
                "–ù–∞—Å—Ç–æ—è—â–∏–π –º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ø–∞—Å–µ–Ω–æ!",
                "–¢—ã —Å–¥–µ–ª–∞–ª –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª—É—á—à–∏–º –≤ App Store!"
            ],
            "Zhasulan": [
                "iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–±–∏–ª—å–Ω–æ! üì±",
                "Swift –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞—Å—Ç–æ—è—â–∏–π iOS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã!"
            ],
            "Aimurat": [
                "AI –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ü§ñ",
                "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!",
                "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π AI/ML —ç–∫—Å–ø–µ—Ä—Ç!"
            ],
            "Bernar": [
                "–¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è! üèÜ",
                "–ù–∞—Å—Ç–æ—è—â–∏–π –ë–û–°–°! –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –±—É–¥—É—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!",
                "–¢—ã –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω –±—ã—Ç—å –ª—É—á—à–∏–º —Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä–æ–º!"
            ]
        }
    
    def get_completion_dialogue(self, npc_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
        if npc_name in self.quest_completion_dialogues:
            dialogues = self.quest_completion_dialogues[npc_name]
            return random.choice(dialogues)
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

class HumorSystem:
    """–°–∏—Å—Ç–µ–º–∞ —é–º–æ—Ä–∞ –∏ –ø–∞—Å—Ö–∞–ª–æ–∫"""
    def __init__(self):
        self.easter_eggs = []
        self.random_tips = []
        self.meme_references = []
        self.setup_humor_content()
    
    def setup_humor_content(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.random_tips = [
            "üí° –°–æ–≤–µ—Ç: –ö–æ—Ñ–µ + –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ = –°—É–ø–µ—Ä–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
            "üí° –°–æ–≤–µ—Ç: –õ—É—á—à–∏–π –∫–æ–¥ - —ç—Ç–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "üí° –°–æ–≤–µ—Ç: Git commit -m 'fix' —Ä–µ—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "üí° –°–æ–≤–µ—Ç: Stack Overflow - –ª—É—á—à–∏–π –¥—Ä—É–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            "üí° –°–æ–≤–µ—Ç: Ctrl+C, Ctrl+V - –æ—Å–Ω–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
            "üí° –°–æ–≤–µ—Ç: –ë–∞–≥ - —ç—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞",
            "üí° –°–æ–≤–µ—Ç: –ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–µ–º –ª—É—á—à–µ –∫–æ–¥",
            "üí° –°–æ–≤–µ—Ç: Python - –ª—É—á—à–∏–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ–≥–æ",
            "üí° –°–æ–≤–µ—Ç: JavaScript - —è–∑—ã–∫ –±—É–¥—É—â–µ–≥–æ",
            "üí° –°–æ–≤–µ—Ç: Rust - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ"
        ]
        
        self.meme_references = [
            "üéÆ 'It just works' - Todd Howard",
            "üéÆ 'Hello World' - –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É",
            "üéÆ '99 little bugs in the code...'",
            "üéÆ 'Stack Overflow is my documentation'",
            "üéÆ 'I don't always test my code, but when I do...'",
            "üéÆ 'Real programmers count from 0'",
            "üéÆ 'There are 10 types of people...'",
            "üéÆ 'Why do programmers prefer dark mode?'",
            "üéÆ 'Git: 'It's not a bug, it's an undocumented feature''",
            "üéÆ 'The best code is no code'"
        ]
    
    def get_random_tip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
        return random.choice(self.random_tips)
    
    def get_random_meme(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –º–µ–º-—Å—Å—ã–ª–∫–∏"""
        return random.choice(self.meme_references)

class SettingsManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–≥—Ä—ã"""
    def __init__(self):
        self.settings = {
            "master_volume": 0.7,
            "music_volume": 0.5,
            "sfx_volume": 0.8,
            "screen_resolution": "1280x720",
            "fullscreen": False,
            "show_tips": True,
            "auto_save": True,
            "difficulty": "normal"
        }
        self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('data/settings.json'):
                with open('data/settings.json', 'r') as f:
                    saved_settings = json.load(f)
                    self.settings.update(saved_settings)
        except:
            pass
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs('data', exist_ok=True)
            with open('data/settings.json', 'w') as f:
                json.dump(self.settings, f, indent=2)
        except:
            pass
    
    def update_setting(self, key, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings[key] = value
        self.save_settings()

class ImprovementManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    def __init__(self):
        self.progress_tracker = ProgressTracker()
        self.reward_system = RewardSystem()
        self.event_manager = EventManager()
        self.npc_interaction = NPCInteraction()
        self.humor_system = HumorSystem()
        self.settings_manager = SettingsManager()
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥
        self.reward_animations = []
        self.animation_timer = 0
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        self.event_manager.update(dt)
        self.update_reward_animations(dt)
    
    def update_reward_animations(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥"""
        self.animation_timer += dt
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        self.reward_animations = [
            anim for anim in self.reward_animations
            if pygame.time.get_ticks() - anim["start_time"] < anim["duration"]
        ]
    
    def show_reward_animation(self, reward_type, value):
        """–ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã"""
        animation = {
            "type": reward_type,
            "value": value,
            "start_time": pygame.time.get_ticks(),
            "duration": 3000,  # 3 —Å–µ–∫—É–Ω–¥—ã
            "y_offset": 0
        }
        self.reward_animations.append(animation)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã
        sound_manager = get_sound_manager()
        if sound_manager:
            sound_manager.play_sound("reward")
    
    def draw_reward_animations(self, screen):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –Ω–∞–≥—Ä–∞–¥"""
        current_time = pygame.time.get_ticks()
        
        for animation in self.reward_animations:
            elapsed = current_time - animation["start_time"]
            progress = elapsed / animation["duration"]
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            if progress < 0.3:
                alpha = int(255 * (progress / 0.3))
            elif progress > 0.7:
                alpha = int(255 * ((1 - progress) / 0.3))
            else:
                alpha = 255
            
            # –ü–æ–∑–∏—Ü–∏—è (–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö)
            y_offset = int(50 * progress)
            x = SCREEN_WIDTH // 2
            y = SCREEN_HEIGHT // 2 - 100 - y_offset
            
            # –¢–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã
            font = pygame.font.Font(None, 48)
            text = f"+{animation['value']} {animation['type']}"
            text_surface = font.render(text, True, (255, 255, 0))
            text_surface.set_alpha(alpha)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_rect = text_surface.get_rect(center=(x, y))
            screen.blit(text_surface, text_rect)
    
    def draw_progress_bars(self, screen, player, quest_manager):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤"""
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∫–≤–µ—Å—Ç–æ–≤
        quest_progress = self.progress_tracker.get_quest_progress_percentage()
        self.draw_progress_bar(screen, 10, 70, 200, 15, quest_progress, 
                             "–ö–≤–µ—Å—Ç—ã", (0, 255, 0))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_progress = (player.current_users / TARGET_USERS) * 100
        self.draw_progress_bar(screen, 10, 90, 200, 15, user_progress,
                             "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", (0, 150, 255))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        student_progress = self.get_student_progress()
        self.draw_progress_bar(screen, 10, 110, 200, 15, student_progress,
                             "–°—Ç—É–¥–µ–Ω—Ç—ã", (255, 150, 0))
    
    def draw_progress_bar(self, screen, x, y, width, height, percentage, label, color):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        # –§–æ–Ω
        pygame.draw.rect(screen, (50, 50, 50), (x, y, width, height))
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        fill_width = int(width * percentage / 100)
        pygame.draw.rect(screen, color, (x, y, fill_width, height))
        
        # –ì—Ä–∞–Ω–∏—Ü–∞
        pygame.draw.rect(screen, (100, 100, 100), (x, y, width, height), 2)
        
        # –¢–µ–∫—Å—Ç
        font = pygame.font.Font(None, 20)
        text = f"{label}: {percentage:.1f}%"
        text_surface = font.render(text, True, (255, 255, 255))
        screen.blit(text_surface, (x + 5, y + 2))
    
    def get_student_progress(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        if not self.progress_tracker.student_progress:
            return 0
        
        total_progress = 0
        for student_id in self.progress_tracker.student_progress:
            total_progress += self.progress_tracker.get_student_progress_percentage(student_id)
        
        return total_progress / len(self.progress_tracker.student_progress)
    
    def draw_active_events(self, screen):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.event_manager.active_events:
            return
        
        y_offset = 150
        for event in self.event_manager.active_events:
            current_time = pygame.time.get_ticks()
            elapsed = current_time - event.start_time
            remaining = event.duration - elapsed
            
            # –§–æ–Ω —Å–æ–±—ã—Ç–∏—è
            event_surface = pygame.Surface((300, 60), pygame.SRCALPHA)
            event_surface.fill((255, 0, 0, 150))
            
            # –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
            font = pygame.font.Font(None, 20)
            name_surface = font.render(event.name, True, (255, 255, 255))
            desc_surface = font.render(event.description, True, (200, 200, 200))
            
            # –¢–∞–π–º–µ—Ä
            timer_text = f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining // 1000}—Å"
            timer_surface = font.render(timer_text, True, (255, 255, 0))
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            screen.blit(event_surface, (SCREEN_WIDTH - 320, y_offset))
            screen.blit(name_surface, (SCREEN_WIDTH - 310, y_offset + 5))
            screen.blit(desc_surface, (SCREEN_WIDTH - 310, y_offset + 25))
            screen.blit(timer_surface, (SCREEN_WIDTH - 310, y_offset + 40))
            
            y_offset += 70

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
improvement_manager = None

def init_improvement_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π"""
    global improvement_manager
    improvement_manager = ImprovementManager()

def get_improvement_manager():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π"""
    return improvement_manager 