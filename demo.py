#!/usr/bin/env python3
"""
nQuester: Incubator Rush - DEMO –≤–µ—Ä—Å–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ç–∞ –±–µ–∑ pygame
"""

import time
import random

class GameDemo:
    def __init__(self):
        self.player_users = 0
        self.target_users = 10000
        self.completed_quests = []
        
        # Mentors and their quests
        self.mentors = {
            "–ê–ª–∏—Ö–∞–Ω –ì—É–±–∞–µ–≤ (iOS)": {
                "quest": "Swift Debug Showdown", 
                "users": 500,
                "description": "–ù–∞–π–¥–∏ –±–∞–≥ –≤ Swift –∫–æ–¥–µ –∑–∞ 15 —Å–µ–∫—É–Ω–¥!"
            },
            "–ê–ª–∏–±–µ–∫ –°–µ–∏—Ç–æ–≤ (AI/ML)": {
                "quest": "Train Your Brain",
                "users": 800, 
                "description": "–û–±—É—á–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞ –∫–æ—Ç–∏–∫–∞—Ö!"
            },
            "–ë–∞—Ö—Ä–µ–¥–∏–Ω –ó—É—Ä–≥–∞–º–±–∞–µ–≤ (TypeScript)": {
                "quest": "Strict Mode Madness",
                "users": 600,
                "description": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ TypeScript —Ç–∏–ø–∞–º!"
            },
            "–£—Å—Ç–∞–ª—ã–π —Å—Ç—É–¥–µ–Ω—Ç": {
                "quest": "Burnout Simulator",
                "users": 300,
                "description": "–ü—Ä–∏–Ω–µ—Å–∏ –≤–æ–¥—ã —É—Å—Ç–∞–≤—à–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É"
            }
        }
    
    def print_banner(self):
        """Print game banner"""
        print("üöÄ" + "="*50 + "üöÄ")
        print("    nQuester: Incubator Rush - DEMO")
        print("    2D RPG –∏–≥—Ä–∞ –ø—Ä–æ nFactorial")
        print("üöÄ" + "="*50 + "üöÄ")
        print()
    
    def print_status(self):
        """Print current game status"""
        progress = (self.player_users / self.target_users) * 100
        progress_bar = "‚ñà" * int(progress // 5) + "‚ñë" * (20 - int(progress // 5))
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.player_users:,}/{self.target_users:,}")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {progress:.1f}%")
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {len(self.completed_quests)}")
        print()
    
    def show_available_quests(self):
        """Show available quests"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –æ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤:")
        print("-" * 40)
        
        available = []
        for i, (mentor, data) in enumerate(self.mentors.items(), 1):
            if mentor not in self.completed_quests:
                available.append((i, mentor, data))
                print(f"{i}. {mentor}")
                print(f"   üéØ {data['quest']}")
                print(f"   üë• –ù–∞–≥—Ä–∞–¥–∞: +{data['users']:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   üí¨ {data['description']}")
                print()
        
        return available
    
    def simulate_swift_debug(self):
        """Simulate Swift debugging minigame"""
        print("üõ†Ô∏è  –ú–ò–ù–ò-–ò–ì–†–ê: Swift Debug Showdown")
        print("=" * 40)
        
        code_lines = [
            "1. let name = \"Alex\"",
            "2. var age: Int = 25", 
            "3. let users = 1000",
            "4. const isActive = true  ‚Üê –ë–ê–ì!",
            "5. print(\"Hello World\")"
        ]
        
        print("–ù–∞–π–¥–∏ –æ—à–∏–±–∫—É –≤ Swift –∫–æ–¥–µ:")
        for line in code_lines:
            print(line)
        
        print("\n–í —Å—Ç—Ä–æ–∫–µ 4 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'const' –≤–º–µ—Å—Ç–æ 'let'!")
        print("‚è±Ô∏è  –í—Ä–µ–º—è: 12.3s / 15.0s")
        print("‚úÖ –£–°–ü–ï–•! –ë–∞–≥ –Ω–∞–π–¥–µ–Ω!")
        
        return True
    
    def simulate_ai_training(self):
        """Simulate AI training minigame"""
        print("üß† –ú–ò–ù–ò-–ò–ì–†–ê: Train Your Brain")
        print("=" * 40)
        
        print("–ü–µ—Ä–µ—Ç–∞—â–∏ –∫–æ—Ç–∏–∫–æ–≤ –∫ –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:")
        print("üê± üê∂ üê± üß† üê± üê∂ üê±")
        print("     ‚Üì    ‚Üì    ‚Üì")
        print("        üß†")
        print("      –ú–û–î–ï–õ–¨")
        
        print("\n‚úÖ –û–±—É—á–µ–Ω–æ –Ω–∞ 5 –∫–æ—Ç–∏–∫–∞—Ö!")
        print("üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: 99%")
        print("üéâ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        
        return True
    
    def simulate_ts_quiz(self):
        """Simulate TypeScript quiz"""
        print("üìù –ú–ò–ù–ò-–ò–ì–†–ê: Strict Mode Madness")
        print("=" * 40)
        
        questions = [
            {
                "q": "–ö–∞–∫–æ–π —Ç–∏–ø —É user.name?",
                "code": "const user = { id: 1, name: 'Alex' }",
                "answer": "string"
            },
            {
                "q": "–ß—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º?", 
                "code": "let value: any = 'hello'",
                "answer": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è any type"
            }
        ]
        
        score = 0
        for i, question in enumerate(questions, 1):
            print(f"\n–í–æ–ø—Ä–æ—Å {i}: {question['q']}")
            print(f"–ö–æ–¥: {question['code']}")
            print(f"–û—Ç–≤–µ—Ç: {question['answer']}")
            score += 1
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
        return score >= len(questions) // 2
    
    def simulate_fetch_quest(self):
        """Simulate fetch quest"""
        print("üö∂ –ö–í–ï–°–¢: Burnout Simulator")
        print("=" * 40)
        
        print("–£—Å—Ç–∞–ª—ã–π —Å—Ç—É–¥–µ–Ω—Ç: '–ö–∞–∂–µ—Ç—Å—è, —è —Å–ª—ã—à—É —Ü–≤–µ—Ç–∞...'")
        print("–ó–∞–¥–∞—á–∞: –ù–∞–π–¥–∏ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã")
        print()
        print("üö∂ –ò–¥–µ—à—å –∫ –∫—É—Ö–Ω–µ...")
        print("üîç –ò—â–µ—à—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ...")
        print("üíß –ù–∞—à–µ–ª –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã!")
        print("üö∂ –í–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å—Ç—É–¥–µ–Ω—Ç—É...")
        print()
        print("–°—Ç—É–¥–µ–Ω—Ç: '–ê—Ö, –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è... –¢–µ–ø–µ—Ä—å –ª—É—á—à–µ!'")
        print("‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        
        return True
    
    def run_quest(self, mentor, quest_data):
        """Run a specific quest"""
        print(f"\nüéÆ –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–µ—Å—Ç: {quest_data['quest']}")
        print(f"üìù –ú–µ–Ω—Ç–æ—Ä: {mentor}")
        print()
        
        # Simulate different quest types
        if "Debug" in quest_data['quest']:
            success = self.simulate_swift_debug()
        elif "Brain" in quest_data['quest']:
            success = self.simulate_ai_training()
        elif "TypeScript" in quest_data['quest']:
            success = self.simulate_ts_quiz()
        else:
            success = self.simulate_fetch_quest()
        
        if success:
            self.player_users += quest_data['users']
            self.completed_quests.append(mentor)
            print(f"\nüéâ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            print(f"üë• +{quest_data['users']:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print(f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.player_users:,}")
        else:
            print("\nüòî –ö–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        
        print("\n" + "="*50)
        return success
    
    def check_victory(self):
        """Check if player won"""
        if self.player_users >= self.target_users:
            print("üéâüéâüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâüéâüéâ")
            print(f"–í—ã –ø—Ä–∏–≤–ª–µ–∫–ª–∏ {self.player_users:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            print("üöÄ –í–∞—à —Å—Ç–∞—Ä—Ç–∞–ø –≥–æ—Ç–æ–≤ –∫ Demo Day!")
            print("üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤—ã—Å—Ç—Ä–æ–∏–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å!")
            print()
            
            if len(self.completed_quests) == len(self.mentors):
                print("üëë –ü–ï–†–§–ï–ö–¢–ù–ê–Ø –ü–û–ë–ï–î–ê!")
                print("–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            
            return True
        return False
    
    def run_demo(self):
        """Run the game demo"""
        self.print_banner()
        
        print("üéØ –¶–ï–õ–¨: –ü—Ä–∏–≤–ª–µ—á—å 10,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ Demo Day")
        print("üéÆ –ì–ï–ô–ú–ü–õ–ï–ô: –í—ã–ø–æ–ª–Ω—è–π –∫–≤–µ—Å—Ç—ã –æ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ nFactorial")
        print()
        
        while not self.check_victory():
            self.print_status()
            available_quests = self.show_available_quests()
            
            if not available_quests:
                print("–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                break
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç (–Ω–æ–º–µ—Ä) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
                
                if choice.lower() == 'q':
                    break
                
                quest_num = int(choice)
                if 1 <= quest_num <= len(available_quests):
                    _, mentor, quest_data = available_quests[quest_num - 1]
                    self.run_quest(mentor, quest_data)
                    
                    # Simulate time passing
                    time.sleep(1)
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞!")
                    
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'q'")
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            print()
        
        print("\nüèÅ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–≠—Ç–æ –±—ã–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ç–∞ –∏–≥—Ä—ã.")
        print("–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∫–ª—é—á–∞–µ—Ç:")
        print("‚Ä¢ 2D –≥—Ä–∞—Ñ–∏–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏ nFactorial")
        print("‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã")
        print("‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π") 
        print("‚Ä¢ –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        print("‚Ä¢ –ò –º–Ω–æ–≥–æ nFactorial –º–µ–º–æ–≤!")

def main():
    demo = GameDemo()
    demo.run_demo()

if __name__ == "__main__":
    main() 